I"%2<p>&lt;!DOCTYPE html&gt;</p>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>百度一下</title>
    <style>
        .x{
            color: red;
        }

        #box3{
            width: 200px;
            height: 200px;
            padding: 10px;
            border: 20px solid black;
            overflow: auto;
        }
    </style>
</head>
<body>
    <!--  
        1. DOM
            文档对象模型 Document Object Model
            将 HTML中的所有元素都当成节点

            节点分类
            * 文档: document
            * 元素: element    (标签)
            * 属性: attribute 
            * 文本: text       (正文内容, 空格, 回车)
            * 注释: comment        


        2. document
            document 对象是 HTML文档的根节点


            document 对象集合
                document.all        获取document中所有的元素
                document.forms      获取document中所有的form元素
                document.images     获取document中所有的img元素
                document.links      获取document中所有的链接元素
            
            document 对象属性
                document.documentElement    返回当前文档的根节点
                document.body                返回当前文档的body
                document.title               返回当前文档的title
                document.URL                 返回当前文档的url地址
                document.domain              返回当前文档的域名
                document.cookie              返回当前的cookie

            document 对象方法
                document.getElementById()
                document.getElementsByClassName()
                document.getElementsByTagName()
                document.getElementsByName()
                document.write()

                document.createElement()    创建一个标签节点
                document.createAttribute()  创建一个属性节点    
                document.createTextNode()   创建一个文本节点

                注: 
                 * 创建任意节点 都不会直接显示在页面中
    -->

    <div id="box"></div>

    <form action="" name="form1"></form>
    <form action="" name="form2"></form>
    <form action="" name="form3"></form>

    <img src="./resource/1.jpg" alt="" />
    <img src="./resource/2.jpg" alt="" />

    <a href="http://aaa">baidu</a>
    <a href="http://aaa">apple</a>

    <x1> xxxx </x1>

    <script>
        // console.log( document.all );
        // console.log( document.forms );
        // console.log( document.images );
        // console.log( document.links );


        // console.log( document.documentElement );
        // console.log( document.body );
        // console.log( document.title );
        // document.title = '淘宝一下' ;
        // console.log( document.URL );  // 支持,  区分大小写
        // console.log( document.url );  // 不支持
        // console.log( document.domain );  
    </script>


    <button id="btn">创建一个b标签</button>
    <script>
        var btn = document.getElementById('btn');

        btn.onclick = function(){

            // 创建一个 b标签
            var b = document.createElement('b');

            // 创建一个 class属性
            var xClass = document.createAttribute('class');
            xClass.value = 'x';  // 给class 赋值

            // 为b标签 设置class属性节点
            b.setAttributeNode(xClass);

            // 为b标签 设置正文内容
            // 方式1: 
            // b.innerHTML = '红色加粗标签';
            
            // 方式2:
            var content = document.createTextNode('红色加粗标签');
            b.appendChild(content);

            // 追加在body里面的最后面
            document.body.appendChild(b);
        }
    </script>


    <div id="box2">
        <b>111</b>
        <i>222</i>
        <div class="son"><span>333</span></div>
    </div>
    <!--  
        2. element 元素
            所有的标签都是element
        
            属性:
                元素节点.childNodes         获取该节点的所有子节点 (包含空格, 回车等)    
                元素节点.firstChild         ...第一个子节点
                元素节点.lastChild          ...最后一个子节点
                元素节点.previousSibling    ...前面一个兄弟节点
                元素节点.nextSibling        ...后面一个兄弟节点
                元素节点.parentNode         ...父级节点

                元素节点.children                   获取该节点的所有子标签
                元素节点.firstElementChild         ...第一个子标签
                元素节点.lastElementChild          ...最后一个子标签
                元素节点.nextElementSibling        ... 后面一个兄弟标签
                元素节点.previousElementSibling    ... 前面一个兄弟标签

                元素节点.tagName            获取/设置该节点的标签名
                元素节点.id                 ... id名
                元素节点.classList          ... class 集合
                元素节点.className          ... class 字符串

                元素节点.innerHTML          所有子节点内容(空格, 内容, 标签, 属性等)      
                元素节点.innerText          所有标签内的正文内容
                元素节点.textContent        该节点内的所有内容 (正文+空格)
        
                元素节点.clientWidth        该节点的宽度 (width+padding, 不包含border和滚动条)
                元素节点.clientHeight       该节点的高度 (width+padding, 不包含border和滚动条)
                元素节点.offsetWidth        该节点的宽度 (width+padding+border)
                元素节点.offsetHeight       该节点的高度 (width+padding+border)

                元素节点.scrollWidth        获取该节点的滚动区间宽度 (不包含滚动条)
                元素节点.scrollHeight       获取该节点的滚动区间高度 (不包含滚动条)
                元素节点.scrollLeft         获取该节点滚动条距离最左侧的距离
                元素节点.scrollTop          获取该节点滚动条距离最顶部的距离

                元素节点.NodeName           获取该节点的名字
                元素节点.NodeType           获取该节点的类型
                元素节点.NodeValue          获取该节点的值
                参考地址: https://www.w3school.com.cn/js/js_htmldom_navigation.asp

            方法:
                元素节点.hasChildNodes()        是否有子节点
                元素节点.appendChild()          追加一个子节点
                元素节点.removeChild()          删除一个子节点
                元素节点.replaceChild(new, old) 替换一个子节点
                元素节点.insertBefore(new, old) 插入一个子节点
                
                元素节点.hasAttribute()         是否有指定属性
                元素节点.hasAttributes()        是否有属性 (不需要指定, 只要有任意一个属性即可)
                元素节点.getAttribute()         获取属性
                元素节点.setAttribute(属性名, 属性值) 设置属性
                元素节点.removeAttribute()      删除属性

                元素节点.cloneNode(Boolean值)   克隆节点
                                                 true: 连同子节点一起拷贝
                                                 false: 只拷贝当前节点
                
                元素节点.addEventListener()     添加监听
                元素节点.removeEventListener()  移除监听
    -->

    <ul id="hero">
        <li class="list a b c">李白</li>
        <li class="list a b c">阿珂</li>
        <li class="list a b c">兰陵</li>
        <li class="list a b c">悟空</li>
    </ul>

    <div id="box3" title="5555">
        <span id="span">8888</span>
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
        11111111111111111111111111111111111111111<br />
    </div>


    <script>
        var box = document.getElementById('box2');
        console.dir( box );
        // console.log( box.childNodes );
        // console.log( box.children );
        
        // console.log( box.firstChild );
        // console.log( box.lastChild );

        // console.log( box.parentNode );

        // console.log( box.previousSibling );
        // console.log( box.previousElementSibling );
        // console.log( box.previousElementSibling.previousElementSibling );

        // console.log( box.parentNode.firstElementChild );


        var hero = document.getElementById('hero');
        console.log( hero.tagName );
        console.log( hero.id );
        console.log( hero.children[0].classList );
        console.log( hero.children[0].className );

        console.dir( hero );

        var box3 = document.getElementById('box3');
        console.log( box3.clientWidth );
        console.log( box3.offsetWidth );

        console.log( box3.scrollWidth );

        box3.onscroll = function(){
            console.log( box3.scrollLeft );
        }


        console.log( box3.nodeName );
        console.log( box3.nodeType );
        console.log( box3.nodeValue );

        console.log( box3.firstChild.nodeName );
        console.log( box3.firstChild.nodeType );
        console.log( box3.firstChild.nodeValue );


        var span = document.getElementById('span');
        console.log( box3.hasChildNodes(span) );

        box3.appendChild(document.createTextNode('666666'));
        // box3.removeChild(span);


        // var b = document.createElement('b');
        // b.innerHTML = '9999';
        // box3.replaceChild(b,span);


        console.log( box3.hasAttribute('id') );
        console.log( box3.firstElementChild.hasAttributes()    );


        console.log( box3.firstElementChild.getAttribute('id')    );
        console.log( box3.firstElementChild.setAttribute('class','x')    );
        console.log( box3.firstElementChild.removeAttribute('class')    );

    </script>



    <button id="btn2">克隆</button>
    <script>
        var btn2 = document.getElementById('btn2');

        btn2.onclick = function(){

            // var x = box3.cloneNode(true);
            var x = box3.cloneNode(false);

            document.body.appendChild(x);

        }
    </script>
    


    <ul id="ul">
        <li class="item">李白</li>
        <li class="item">阿珂</li>
        <li class="item">兰陵</li>
        <li class="item">韩信</li>
    </ul>

    <button id="btn4">添加一个li</button>

    <script>
        var item = document.getElementsByClassName('item');

        btn4.onclick = function(){
            var ul = document.getElementById('ul');

            var li = document.createElement('li');
            li.setAttribute('class','item');
            li.innerHTML = '悟空';

            ul.appendChild(li);
        }


        document.addEventListener('click', function(e){

            var tar = e.target;           
            // console.log(e.target);
            
            if( tar.className == 'item' ){
                console.log(222);
            }

        });


        // item[4].onclick = function(){
        //     console.log(111);
        // }        
    </script>



    <!--  
        4. attribute

            元素节点.attributes
            元素节点.attributes[].name
            元素节点.attributes[].value
            元素节点.attributes.length
            元素节点.attributes.item()
            元素节点.attributes.getNameItem()
            元素节点.attributes.setNameItem()
            元素节点.attributes.removeNameItem()

            属性节点.name
            属性节点.value
            ...
    -->

</body>
</html>
:ET